#!/usr/bin/env python
"""Monitor the jobs submitted to the SLURM workload manager.

Returns some statistics for the SLURM command 'squeue': the number of queued
and running jobs, as well as the total number of submitted jobs.

usage: swatch [-h] [-n N] [-l L]

optional arguments:
  -h, --help  show this help message and exit
  -n N        update interval (seconds)
  -l L        number of lines to print in the squeue summary
"""
from __future__ import print_function

import os
import re
import subprocess
import sys

import argparse
import time


# get $USER
USER = os.getlogin()
# column in squeue output to read status from
STATUS_COLUMN = 4

rows, columns = os.popen('stty size', 'r').read().split()

# get command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument('-n', type=float, default=5,
                    help='update interval (seconds)')
parser.add_argument('-l', type=int, default=(int(rows)-8),
                    help='number of lines to print in the squeue summary')
args = vars(parser.parse_args())

wspacere = re.compile('^[ ]{10,11}')

# process squeue
while True:
    try:
        # clear screen
        subprocess.call(['clear'])

        # get squeue output
        squeue = subprocess.check_output(['squeue', '-u', USER, '-r'])

        # filter relevant lines of squeue
        squeue_lines = [line.split() for line in
                        squeue.decode('utf8').splitlines() if USER in line]

        # get number of running/queued jobs
        njobs = {}

        # initialize job count for running (R) and pending (PD) jobs
        for status in "R", "PD":
            njobs[status] = 0

        regex = re.compile("[-:]")
        for col in squeue_lines:
            for cname in ['R', 'PD']:
                if col[STATUS_COLUMN] == cname:
                    njobs[cname] += 1

        # calculate totals
        njobs["total"] = njobs.get("R") + njobs.get("PD")

        # get current timestamp
        date = time.strftime("%a %b %d %H:%M:%S %Z %Y")
        print(date)

        print("""
SLURM summary:
==============
    Number of submitted jobs:     {total}
    Number of running jobs (R):   {R}
    Number of pending jobs (PD):  {PD}

        """.format(**njobs))

        # get compressed squeue output & filter relevant lines
        squeue = subprocess.check_output(['squeue', '-u', USER])
        squeue_lines = [line.split() for line in
                        squeue.decode('utf8').splitlines() if USER in line]

        # mimick the bash-builtin 'head'
        NLINES = args.get('l')
        for line in squeue.splitlines()[:NLINES]:
            print(wspacere.sub('', line.decode('utf8')))

        time.sleep(args.get('n'))
    except KeyboardInterrupt:
        sys.exit()
